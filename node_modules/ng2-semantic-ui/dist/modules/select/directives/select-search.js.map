{"version":3,"file":"select-search.js","sourceRoot":"","sources":["../../../../src/modules/select/directives/select-search.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,SAAS,EAAS,YAAY,EAAE,SAAS,EAAE,UAAU,EAAE,YAAY,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAKjH,IAAa,eAAe;IAcxB,yBAAoB,SAAmB,EAAU,QAAmB;QAAhD,cAAS,GAAT,SAAS,CAAU;QAAU,aAAQ,GAAR,QAAQ,CAAW;QAChE,IAAI,CAAC,cAAc,GAAG,IAAI,YAAY,EAAU,CAAC;QACjD,IAAI,CAAC,cAAc,GAAG,IAAI,YAAY,EAAiB,CAAC;QAExD,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QACzB,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;IAC/B,CAAC;IAbD,sBAAW,kCAAK;aAAhB,UAAiB,KAAY;YACzB,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;QAC5E,CAAC;;;OAAA;IAcO,qCAAW,GAAnB,UAAoB,KAAY;QAC5B,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACpC,CAAC;IAGO,mCAAS,GAAjB,UAAkB,CAAe;QAC7B,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAChC,CAAC;IAEM,+BAAK,GAAZ;QAAA,iBAIC;QAHG,4CAA4C;QAC5C,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;QACpC,UAAU,CAAC,cAAM,OAAA,KAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,KAAK,EAAE,EAAnC,CAAmC,CAAC,CAAC;IAC1D,CAAC;IACL,sBAAC;AAAD,CAAC,AArCD,IAqCC;AAnCG;IADC,WAAW,CAAC,cAAc,CAAC;;qDACC;AAG7B;IADC,WAAW,CAAC,mBAAmB,CAAC;;sDACJ;AAkB7B;IADC,YAAY,CAAC,OAAO,EAAE,CAAC,qBAAqB,CAAC,CAAC;;;;kDAG9C;AAGD;IADC,YAAY,CAAC,SAAS,EAAE,CAAC,QAAQ,CAAC,CAAC;;qCAChB,aAAa;;gDAEhC;AA9BQ,eAAe;IAH3B,SAAS,CAAC;QACP,QAAQ,EAAE,wBAAwB;KACrC,CAAC;qCAegC,SAAS,EAAmB,UAAU;GAd3D,eAAe,CAqC3B;SArCY,eAAe","sourcesContent":["import { Directive, Input, EventEmitter, Renderer2, ElementRef, HostListener, HostBinding } from \"@angular/core\";\r\n\r\n@Directive({\r\n    selector: \"input[suiSelectSearch]\"\r\n})\r\nexport class SuiSelectSearch {\r\n    @HostBinding(\"class.search\")\r\n    private _searchClass:boolean;\r\n\r\n    @HostBinding(\"attr.autocomplete\")\r\n    private _autoComplete:string;\r\n\r\n    public set query(query:string) {\r\n        this._renderer.setProperty(this._element.nativeElement, \"value\", query);\r\n    }\r\n\r\n    public onQueryUpdated:EventEmitter<string>;\r\n    public onQueryKeyDown:EventEmitter<KeyboardEvent>;\r\n\r\n    constructor(private _renderer:Renderer2, private _element:ElementRef) {\r\n        this.onQueryUpdated = new EventEmitter<string>();\r\n        this.onQueryKeyDown = new EventEmitter<KeyboardEvent>();\r\n\r\n        this._searchClass = true;\r\n        this._autoComplete = \"off\";\r\n    }\r\n\r\n    @HostListener(\"input\", [\"$event.target.value\"])\r\n    private updateQuery(query:string):void {\r\n        this.onQueryUpdated.emit(query);\r\n    }\r\n\r\n    @HostListener(\"keydown\", [\"$event\"])\r\n    private onKeyDown(e:KeyboardEvent):void {\r\n        this.onQueryKeyDown.emit(e);\r\n    }\r\n\r\n    public focus():void {\r\n        // Slightly delay to support in menu search.\r\n        this._element.nativeElement.focus();\r\n        setTimeout(() => this._element.nativeElement.focus());\r\n    }\r\n}\r\n"]}