{"version":3,"file":"search.service.js","sourceRoot":"","sources":["../../../../src/modules/search/services/search.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAE,MAAM,0BAA0B,CAAC;AAKhD;IA0EI,uBAAY,eAA+B;QAA/B,gCAAA,EAAA,uBAA+B;QAA3C,iBAwBC;QAvBG,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACnB,IAAI,CAAC,aAAa,GAAG,UAAC,EAAE,EAAE,CAAC;YACvB,wCAAwC;YACxC,IAAM,KAAK,GAAG,KAAI,CAAC,OAAO,CAAC,KAAI,CAAC,MAAM,CAAC,CAAC;YAExC,EAAE,CAAC,CAAC,KAAK,YAAY,MAAM,CAAC,CAAC,CAAC;gBAC1B,wDAAwD;gBACxD,0FAA0F;gBAC1F,MAAM,CAAC,EAAE;qBAEJ,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,IAAI,CAAC,MAAM,CAAC,SAAS,CAAY,CAAC,EAAE,KAAI,CAAC,aAAa,CAAC;qBAC/D,QAAQ,EAAE;qBACV,KAAK,CAAC,KAAK,CAAC,EAFJ,CAEI,CAAC,CAAC;YAC3B,CAAC;YAED,8CAA8C;YAC9C,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC,CAAC;QAEF,gCAAgC;QAChC,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;QACrB,IAAI,CAAC,KAAK,EAAE,CAAC;IACjB,CAAC;IAxFD,sBAAW,kCAAO;aAAlB;YACI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;QACzB,CAAC;aAED,UAAmB,OAAW;YAC1B,IAAI,CAAC,QAAQ,GAAG,OAAO,IAAI,EAAE,CAAC;YAC9B,4DAA4D;YAC5D,IAAI,CAAC,cAAc,GAAG,SAAS,CAAC;YAChC,yCAAyC;YACzC,IAAI,CAAC,KAAK,EAAE,CAAC;QACjB,CAAC;;;OARA;IAUD,sBAAW,wCAAa;aAAxB;YACI,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC;QAC/B,CAAC;aAED,UAAyB,QAAmC;YACxD,IAAI,CAAC,cAAc,GAAG,QAAQ,CAAC;YAC/B,+DAA+D;YAC/D,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;YACnB,IAAI,CAAC,KAAK,EAAE,CAAC;QACjB,CAAC;;;OAPA;IASD,sBAAW,wCAAa;aAAxB;YACI,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,KAAK,CAAC,CAAC;QACnE,CAAC;;;OAAA;IAED,sBAAW,uCAAY;aAAvB;YACI,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC;QAC9B,CAAC;aAED,UAAwB,KAAwB;YAC5C,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;YAC3B,6EAA6E;YAC7E,IAAI,CAAC,KAAK,EAAE,CAAC;QACjB,CAAC;;;OANA;IAaD,sBAAW,kCAAO;aAAlB;YACI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;QACzB,CAAC;;;OAAA;IAYD,sBAAW,gCAAK;aAAhB;YACI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;QACvB,CAAC;;;OAAA;IAED,sBAAW,sCAAW;aAAtB;YACI,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;QAC7B,CAAC;;;OAAA;IA4BD,sDAAsD;IAC/C,0CAAkB,GAAzB,UAA0B,KAAY,EAAE,QAAwC;QAAhF,iBAUC;QAVuC,yBAAA,EAAA,yBAAuC,CAAC;QAC5E,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QAEpB,YAAY,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;QACvC,IAAI,CAAC,mBAAmB,GAAG,MAAM,CAAC,UAAU,CACxC;YACI,KAAI,CAAC,WAAW,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;QACtC,CAAC,EACD,IAAI,CAAC,WAAW,CACnB,CAAC;IACN,CAAC;IAED,oCAAoC;IAC7B,mCAAW,GAAlB,UAAmB,KAAY,EAAE,QAAwC;QAAzE,iBA2CC;QA3CgC,yBAAA,EAAA,yBAAuC,CAAC;QACrE,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QAEpB,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;YAC9C,6EAA6E;YAC7E,mEAAmE;YACnE,MAAM,CAAC,QAAQ,EAAE,CAAC;QACtB,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YACjD,kDAAkD;YAClD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAEhD,MAAM,CAAC,QAAQ,EAAE,CAAC;QACtB,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;YACtB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;YAEzB,kDAAkD;YAClD,IAAM,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAwB,CAAC;YAE5F,WAAW;iBACN,IAAI,CAAC,UAAA,OAAO;gBACT,KAAI,CAAC,YAAY,GAAG,KAAK,CAAC;gBAE1B,KAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;gBAC5B,MAAM,CAAC,QAAQ,EAAE,CAAC;YACtB,CAAC,CAAC;iBACD,KAAK,CAAC,UAAA,KAAK;gBACR,oFAAoF;gBACpF,KAAI,CAAC,YAAY,GAAG,KAAK,CAAC;gBAC1B,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YAC3B,CAAC,CAAC,CAAC;YAEP,MAAM,CAAC;QACX,CAAC;QAED,IAAM,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QAChF,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACX,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QACjC,CAAC;QACD,MAAM,CAAC,QAAQ,EAAE,CAAC;IACtB,CAAC;IAED,2CAA2C;IACnC,qCAAa,GAArB,UAAsB,OAAW;QAC7B,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,OAAO,CAAC;QAC1C,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IAC5B,CAAC;IAMD,kDAAkD;IAC3C,qCAAa,GAApB,UAAqB,OAAe;QAChC,EAAE,CAAC,CAAC,OAAO,YAAY,KAAK,CAAC,CAAC,CAAC;YAC3B,MAAM,CAAE,IAAI,CAAC,cAAmC,CAAC,SAAS,EAAE,OAAO,CAAwB,CAAC;QAChG,CAAC;QACD,MAAM,CAAE,IAAI,CAAC,cAAiC,CAAC,SAAS,EAAE,OAAO,CAAsB,CAAC;IAC5F,CAAC;IAED,8DAA8D;IACtD,+BAAO,GAAf,UAAgB,KAAY;QACxB,IAAI,CAAC;YACD,MAAM,CAAC,IAAI,MAAM,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QAClC,CAAC;QAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACT,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC;IACL,CAAC;IAED,6CAA6C;IACtC,wCAAgB,GAAvB,UAAwB,IAAW,EAAE,KAAY;QAC7C,IAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAClC,EAAE,CAAC,CAAC,KAAK,YAAY,MAAM,CAAC,CAAC,CAAC;YAC1B,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,UAAA,KAAK,IAAI,OAAA,QAAM,KAAK,SAAM,EAAjB,CAAiB,CAAC,CAAC;QAC3D,CAAC;QACD,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED,8CAA8C;IACtC,6BAAK,GAAb;QACI,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACnB,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;QACxB,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;QAC1B,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;IACzB,CAAC;IACL,oBAAC;AAAD,CAAC,AA1MD,IA0MC","sourcesContent":["import { Util } from \"../../../misc/util/index\";\r\nimport { LookupFn, LookupFnResult, FilterFn } from \"../helpers/lookup-fn\";\r\n\r\ninterface ICachedArray<T> { [query:string]:T[]; }\r\n\r\nexport class SearchService<T, U> {\r\n    // Stores the available options.\r\n    private _options:T[];\r\n    // Converts a query string into an array of options. Must be a function returning a promise.\r\n    private _optionsLookup?:LookupFn<T, U>;\r\n    // Field that options are searched & displayed on.\r\n    private _optionsField?:string;\r\n    // Filters a list of options.\r\n    public optionsFilter:FilterFn<T>;\r\n\r\n    public get options():T[] {\r\n        return this._options;\r\n    }\r\n\r\n    public set options(options:T[]) {\r\n        this._options = options || [];\r\n        // We cannot use both local & remote options simultaneously.\r\n        this._optionsLookup = undefined;\r\n        // Reset entire service with new options.\r\n        this.reset();\r\n    }\r\n\r\n    public get optionsLookup():LookupFn<T, U> | undefined {\r\n        return this._optionsLookup;\r\n    }\r\n\r\n    public set optionsLookup(lookupFn:LookupFn<T, U> | undefined) {\r\n        this._optionsLookup = lookupFn;\r\n        // As before, cannot use local & remote options simultaneously.\r\n        this._options = [];\r\n        this.reset();\r\n    }\r\n\r\n    public get hasItemLookup():boolean {\r\n        return !!this.optionsLookup && this.optionsLookup.length === 2;\r\n    }\r\n\r\n    public get optionsField():string | undefined {\r\n        return this._optionsField;\r\n    }\r\n\r\n    public set optionsField(field:string | undefined) {\r\n        this._optionsField = field;\r\n        // We need to reset otherwise we would now be showing invalid search results.\r\n        this.reset();\r\n    }\r\n\r\n    // Stores the results of the query.\r\n    private _results:T[];\r\n    // Cache of results, indexed by query.\r\n    private _resultsCache:ICachedArray<T>;\r\n\r\n    public get results():T[] {\r\n        return this._results;\r\n    }\r\n\r\n    private _query:string;\r\n    // Allows the empty query to produce results.\r\n    public allowEmptyQuery:boolean;\r\n    // How long to delay the search for when using updateQueryDelayed. Stored in ms.\r\n    public searchDelay:number;\r\n    // Stores the search timeout handle so we can cancel it.\r\n    private _searchDelayTimeout:number;\r\n    // Provides 'loading' functionality.\r\n    private _isSearching:boolean;\r\n\r\n    public get query():string {\r\n        return this._query;\r\n    }\r\n\r\n    public get isSearching():boolean {\r\n        return this._isSearching;\r\n    }\r\n\r\n    constructor(allowEmptyQuery:boolean = false) {\r\n        this._options = [];\r\n        this.optionsFilter = (os, q) => {\r\n            // Convert the query string to a RegExp.\r\n            const regex = this.toRegex(this._query);\r\n\r\n            if (regex instanceof RegExp) {\r\n                // Only update the results if the query was valid regex.\r\n                // This avoids the results suddenly becoming empty if an invalid regex string is inputted.\r\n                return os\r\n                    // Filter on the options with a string match on the field we are testing.\r\n                    .filter(o => Util.Object.readValue<T, string>(o, this._optionsField)\r\n                        .toString()\r\n                        .match(regex));\r\n            }\r\n\r\n            // Don't update since it wasn't a valid regex.\r\n            return false;\r\n        };\r\n\r\n        // Set default values and reset.\r\n        this.allowEmptyQuery = allowEmptyQuery;\r\n        this.searchDelay = 0;\r\n        this.reset();\r\n    }\r\n\r\n    // Updates the query after the specified search delay.\r\n    public updateQueryDelayed(query:string, callback:(err?:Error) => void = () => {}):void {\r\n        this._query = query;\r\n\r\n        clearTimeout(this._searchDelayTimeout);\r\n        this._searchDelayTimeout = window.setTimeout(\r\n            () => {\r\n                this.updateQuery(query, callback);\r\n            },\r\n            this.searchDelay\r\n        );\r\n    }\r\n\r\n    // Updates the current search query.\r\n    public updateQuery(query:string, callback:(err?:Error) => void = () => {}):void {\r\n        this._query = query;\r\n\r\n        if (this._query === \"\" && !this.allowEmptyQuery) {\r\n            // Don't update if the new query is empty (and we don't allow empty queries).\r\n            // Don't reset so that when animating closed we don't get a judder.\r\n            return callback();\r\n        }\r\n\r\n        if (this._resultsCache.hasOwnProperty(this._query)) {\r\n            // If the query is already cached, make use of it.\r\n            this._results = this._resultsCache[this._query];\r\n\r\n            return callback();\r\n        }\r\n\r\n        if (this._optionsLookup) {\r\n            this._isSearching = true;\r\n\r\n            // Call the options lookup without a this context.\r\n            const queryLookup = this._optionsLookup.call(undefined, this._query) as LookupFnResult<T[]>;\r\n\r\n            queryLookup\r\n                .then(results => {\r\n                    this._isSearching = false;\r\n\r\n                    this.updateResults(results);\r\n                    return callback();\r\n                })\r\n                .catch(error => {\r\n                    // Unset 'loading' state, and throw the returned error without updating the results.\r\n                    this._isSearching = false;\r\n                    return callback(error);\r\n                });\r\n\r\n            return;\r\n        }\r\n\r\n        const filtered = this.optionsFilter.call(undefined, this._options, this._query);\r\n        if (filtered) {\r\n            this.updateResults(filtered);\r\n        }\r\n        return callback();\r\n    }\r\n\r\n    // Updates & caches the new set of results.\r\n    private updateResults(results:T[]):void {\r\n        this._resultsCache[this._query] = results;\r\n        this._results = results;\r\n    }\r\n\r\n    // tslint:disable-next-line:promise-function-async\r\n    public initialLookup(initial:U):LookupFnResult<T>;\r\n    // tslint:disable-next-line:promise-function-async\r\n    public initialLookup(initial:U[]):LookupFnResult<T[]>;\r\n    // tslint:disable-next-line:promise-function-async\r\n    public initialLookup(initial:U | U[]):LookupFnResult<T> | LookupFnResult<T[]> {\r\n        if (initial instanceof Array) {\r\n            return (this._optionsLookup as LookupFn<T, U[]>)(undefined, initial) as LookupFnResult<T[]>;\r\n        }\r\n        return (this._optionsLookup as LookupFn<T, U>)(undefined, initial) as LookupFnResult<T>;\r\n    }\r\n\r\n    // Converts a query string to regex without throwing an error.\r\n    private toRegex(query:string):RegExp | string {\r\n        try {\r\n            return new RegExp(query, \"i\");\r\n        } catch (e) {\r\n            return query;\r\n        }\r\n    }\r\n\r\n    // Generates HTML for highlighted match text.\r\n    public highlightMatches(text:string, query:string):string {\r\n        const regex = this.toRegex(query);\r\n        if (regex instanceof RegExp) {\r\n            return text.replace(regex, match => `<b>${match}</b>`);\r\n        }\r\n        return text;\r\n    }\r\n\r\n    // Resets the search back to a pristine state.\r\n    private reset():void {\r\n        this._results = [];\r\n        this._resultsCache = {};\r\n        this._isSearching = false;\r\n        this.updateQuery(\"\");\r\n    }\r\n}\r\n"]}