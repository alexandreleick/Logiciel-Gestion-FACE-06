{"version":3,"file":"search-result.js","sourceRoot":"","sources":["../../../../src/modules/search/components/search-result.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EACH,SAAS,EAAE,SAAS,EAAE,gBAAgB,EAAyB,WAAW,EAC1E,KAAK,EAAE,WAAW,EACrB,MAAM,eAAe,CAAC;AACvB,OAAO,EAAuB,mBAAmB,EAAE,MAAM,0BAA0B,CAAC;AAGpF,4DAA4D;AAC5D,IAAM,WAAW,GAAG,WAAW,CAAC;AAShC,IAAa,eAAe;IAoCxB,yBAAmB,gBAAoC;QAApC,qBAAgB,GAAhB,gBAAgB,CAAoB;QACnD,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;QAE3B,4HAA4H;QAC5H,IAAI,CAAC,SAAS,GAAG,UAAA,KAAK,IAAI,OAAA,EAAE,EAAF,CAAE,CAAC;IACjC,CAAC;IAvBD,sBAAW,qCAAQ;aAAnB;YACI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;QAC1B,CAAC;aAED,UAAoB,QAAmD;YACnE,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;YAC1B,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAChB,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,QAAQ,EAAE;oBAClE,SAAS,EAAE,IAAI,CAAC,KAAK;oBACrB,KAAK,EAAE,IAAI,CAAC,KAAK;iBACpB,CAAC,CAAC;YACP,CAAC;QACL,CAAC;;;OAVA;IAsBL,sBAAC;AAAD,CAAC,AA1CD,IA0CC;AAvCG;IADC,WAAW,CAAC,cAAc,CAAC;;uDACG;AAG/B;IADC,KAAK,EAAE;;8CACO;AAGf;IADC,KAAK,EAAE;;8CACY;AAIpB;IADC,KAAK,EAAE;;kDACyC;AAKjD;IADC,KAAK,EAAE;8BACc,WAAW;qCAIJ,WAAW;+CAFvC;AAcD;IADC,SAAS,CAAC,iBAAiB,EAAE,EAAE,IAAI,EAAE,gBAAgB,EAAE,CAAC;8BAClC,gBAAgB;wDAAC;AAlC/B,eAAe;IAP3B,SAAS,CAAC;QACP,QAAQ,EAAE,mBAAmB;QAC7B,QAAQ,EAAE,+GAGb;KACA,CAAC;qCAqCsC,mBAAmB;GApC9C,eAAe,CA0C3B;SA1CY,eAAe","sourcesContent":["import {\r\n    Component, ViewChild, ViewContainerRef, Renderer2, ElementRef, HostBinding,\r\n    Input, TemplateRef\r\n} from \"@angular/core\";\r\nimport { ITemplateRefContext, SuiComponentFactory } from \"../../../misc/util/index\";\r\nimport { IResultContext } from \"./search\";\r\n\r\n// See https://github.com/Microsoft/TypeScript/issues/13449.\r\nconst templateRef = TemplateRef;\r\n\r\n@Component({\r\n    selector: \"sui-search-result\",\r\n    template: `\r\n<span #templateSibling></span>\r\n<span *ngIf=\"!template\" [innerHTML]=\"formatter(value, query)\"></span>\r\n`\r\n})\r\nexport class SuiSearchResult<T> {\r\n    // Sets the Semantic UI classes on the host element.\r\n    @HostBinding(\"class.result\")\r\n    private _optionClasses:boolean;\r\n\r\n    @Input()\r\n    public value:T;\r\n\r\n    @Input()\r\n    public query:string;\r\n\r\n    // Returns the label from a given value.\r\n    @Input()\r\n    public formatter:(obj:T, query:string) => string;\r\n\r\n    private _template?:TemplateRef<IResultContext<T>>;\r\n\r\n    @Input()\r\n    public get template():TemplateRef<IResultContext<T>> | undefined {\r\n        return this._template;\r\n    }\r\n\r\n    public set template(template:TemplateRef<IResultContext<T>> | undefined) {\r\n        this._template = template;\r\n        if (this.template) {\r\n            this.componentFactory.createView(this.templateSibling, this.template, {\r\n                $implicit: this.value,\r\n                query: this.query\r\n            });\r\n        }\r\n    }\r\n\r\n    // Placeholder to draw template beside.\r\n    @ViewChild(\"templateSibling\", { read: ViewContainerRef })\r\n    public templateSibling:ViewContainerRef;\r\n\r\n    constructor(public componentFactory:SuiComponentFactory) {\r\n        this._optionClasses = true;\r\n\r\n        // By default we make this function return an empty string, for the brief moment when it isn't displaying the correct label.\r\n        this.formatter = value => \"\";\r\n    }\r\n}\r\n"]}