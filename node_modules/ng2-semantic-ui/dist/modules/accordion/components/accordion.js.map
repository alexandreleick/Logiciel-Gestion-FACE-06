{"version":3,"file":"accordion.js","sourceRoot":"","sources":["../../../../src/modules/accordion/components/accordion.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,WAAW,EAAE,eAAe,EAAE,SAAS,EAAoB,MAAM,eAAe,CAAC;AAC5G,OAAO,EAAE,iBAAiB,EAAE,MAAM,mBAAmB,CAAC;AACtD,OAAO,EAAE,mBAAmB,EAAE,MAAM,+BAA+B,CAAC;AAmBpE,IAAa,YAAY;IA6BrB;QACI,qDAAqD;QACrD,IAAI,CAAC,QAAQ,GAAG,IAAI,mBAAmB,EAAE,CAAC;QAE1C,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;IACjC,CAAC;IA5BD,sBAAW,qCAAW;aAAtB;YACI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC;QACrC,CAAC;aAED,UAAuB,KAAa;YAChC,IAAI,CAAC,QAAQ,CAAC,WAAW,GAAG,KAAK,CAAC;QACtC,CAAC;;;OAJA;IAOD,sBAAW,oCAAU;aAArB,UAAsB,UAAiB;YACnC,IAAI,CAAC,QAAQ,CAAC,UAAU,GAAG,UAAU,CAAC;QAC1C,CAAC;;;OAAA;IAGD,sBAAW,4CAAkB;aAA7B,UAA8B,QAAe;YACzC,IAAI,CAAC,QAAQ,CAAC,kBAAkB,GAAG,QAAQ,CAAC;QAChD,CAAC;;;OAAA;IAcM,yCAAkB,GAAzB;QAAA,iBAKC;QAJG,IAAI,CAAC,YAAY,EAAE,CAAC;QAEpB,4CAA4C;QAC5C,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,cAAM,OAAA,KAAI,CAAC,YAAY,EAAE,EAAnB,CAAmB,CAAC,CAAC;IAC9D,CAAC;IAEM,mCAAY,GAAnB;QAAA,iBAEC;QADG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAzB,CAAyB,CAAC,CAAC;IACzD,CAAC;IACL,mBAAC;AAAD,CAAC,AA9CD,IA8CC;AA3CG;IAFC,WAAW,CAAC,UAAU,CAAC;IACvB,WAAW,CAAC,iBAAiB,CAAC;;sDACC;AAGhC;IADC,KAAK,EAAE;;;+CAGP;AAOD;IADC,KAAK,EAAE;;;8CAGP;AAGD;IADC,KAAK,EAAE;;;sDAGP;AAKD;IADC,eAAe,CAAC,iBAAiB,CAAC;8BACjB,SAAS;6CAAoB;AA3BtC,YAAY;IAjBxB,SAAS,CAAC;QACP,QAAQ,EAAE,eAAe;QACzB,QAAQ,EAAE,+BAEb;QACG,MAAM,EAAE,CAAC,gMAUZ,CAAC;KACD,CAAC;;GACW,YAAY,CA8CxB;SA9CY,YAAY","sourcesContent":["import { Component, Input, HostBinding, ContentChildren, QueryList, AfterContentInit } from \"@angular/core\";\r\nimport { SuiAccordionPanel } from \"./accordion-panel\";\r\nimport { SuiAccordionService } from \"../services/accordion.service\";\r\n\r\n@Component({\r\n    selector: \"sui-accordion\",\r\n    template: `\r\n<ng-content></ng-content>\r\n`,\r\n    styles: [`\r\n/* Fix for general styling issues */\r\n:host {\r\n    display: block;\r\n}\r\n\r\n/* Fix for styled border issue */\r\n:host.styled sui-accordion-panel:first-child .title {\r\n    border-top: none\r\n}\r\n`]\r\n})\r\nexport class SuiAccordion implements AfterContentInit {\r\n    @HostBinding(\"class.ui\")\r\n    @HostBinding(\"class.accordion\")\r\n    public accordionClasses:boolean;\r\n\r\n    @Input()\r\n    public get closeOthers():boolean {\r\n        return this._service.closeOthers;\r\n    }\r\n\r\n    public set closeOthers(value:boolean) {\r\n        this._service.closeOthers = value;\r\n    }\r\n\r\n    @Input()\r\n    public set transition(transition:string) {\r\n        this._service.transition = transition;\r\n    }\r\n\r\n    @Input()\r\n    public set transitionDuration(duration:number) {\r\n        this._service.transitionDuration = duration;\r\n    }\r\n\r\n    protected _service:SuiAccordionService;\r\n\r\n    @ContentChildren(SuiAccordionPanel)\r\n    protected _panels:QueryList<SuiAccordionPanel>;\r\n\r\n    constructor() {\r\n        // Accordion service is unique to each set of panels.\r\n        this._service = new SuiAccordionService();\r\n\r\n        this.accordionClasses = true;\r\n    }\r\n\r\n    public ngAfterContentInit():void {\r\n        this.updatePanels();\r\n\r\n        // Reconnect panels after they have updated.\r\n        this._panels.changes.subscribe(() => this.updatePanels());\r\n    }\r\n\r\n    public updatePanels():void {\r\n        this._panels.forEach(p => this._service.addPanel(p));\r\n    }\r\n}\r\n"]}