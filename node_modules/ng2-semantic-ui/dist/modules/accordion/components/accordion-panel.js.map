{"version":3,"file":"accordion-panel.js","sourceRoot":"","sources":["../../../../src/modules/accordion/components/accordion-panel.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,MAAM,EAAE,YAAY,EAAE,iBAAiB,EAAE,MAAM,eAAe,CAAC;AAE1F,OAAO,EAAE,oBAAoB,EAAE,UAAU,EAAE,MAAM,wBAAwB,CAAC;AA6B1E,IAAa,iBAAiB;IA4D1B,2BAAoB,eAAiC;QAAjC,oBAAe,GAAf,eAAe,CAAkB;QACjD,IAAI,CAAC,oBAAoB,GAAG,IAAI,oBAAoB,CAAC,KAAK,CAAC,CAAC;QAE5D,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACrB,IAAI,CAAC,YAAY,GAAG,IAAI,YAAY,CAAU,KAAK,CAAC,CAAC;IACzD,CAAC;IA5DD,sBAAW,sCAAO;aAAlB,UAAmB,OAA2B;YAC1C,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;YACxB,IAAI,CAAC,eAAe,CAAC,aAAa,EAAE,CAAC;QACzC,CAAC;;;OAAA;IAQD,sBAAW,qCAAM;aAAjB;YACI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;QACxB,CAAC;aAED,UAAkB,KAAa;YAC3B,gDAAgD;YAChD,IAAM,MAAM,GAAG,CAAC,CAAC,KAAK,CAAC;YAEvB,EAAE,CAAC,CAAC,MAAM,KAAK,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;gBACzB,wCAAwC;gBACxC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;gBAEtB,EAAE,CAAC,CAAC,MAAM,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;oBAC1B,8DAA8D;oBAC9D,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;gBACzC,CAAC;gBACD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBAEpC,oFAAoF;gBACpF,IAAI,CAAC,oBAAoB,CAAC,OAAO,EAAE,CAAC;gBACpC,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,IAAI,UAAU,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC;YAChG,CAAC;QACL,CAAC;;;OApBA;IAsBD,sBAAW,yCAAU;aAArB;YACI,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAChB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC;YACpC,CAAC;YAED,MAAM,CAAC,MAAM,CAAC;QAClB,CAAC;;;OAAA;IAED,sBAAW,iDAAkB;aAA7B;YACI,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAChB,kDAAkD;gBAClD,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC;YAC5C,CAAC;YACD,4DAA4D;YAC5D,MAAM,CAAC,CAAC,CAAC;QACb,CAAC;;;OAAA;IAYM,kCAAM,GAAb;QACI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YACnB,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC;QAC/B,CAAC;IACL,CAAC;IACL,wBAAC;AAAD,CAAC,AAxED,IAwEC;AA7DG;IADC,KAAK,EAAE;;qDACkB;AAK1B;IADC,KAAK,EAAE;;;+CAGP;AAwCD;IADC,MAAM,EAAE;8BACW,YAAY;uDAAU;AA1DjC,iBAAiB;IA3B7B,SAAS,CAAC;QACP,QAAQ,EAAE,qBAAqB;QAC/B,QAAQ,EAAE,mBAAmB;QAC7B,QAAQ,EAAE,8ZAWb;QACG,MAAM,EAAE,CAAC,2LAUZ,CAAC;KACD,CAAC;qCA6DsC,iBAAiB;GA5D5C,iBAAiB,CAwE7B;SAxEY,iBAAiB","sourcesContent":["import { Component, Input, Output, EventEmitter, ChangeDetectorRef } from \"@angular/core\";\r\nimport { SuiAccordionService } from \"../services/accordion.service\";\r\nimport { TransitionController, Transition } from \"../../transition/index\";\r\n\r\n@Component({\r\n    selector: \"sui-accordion-panel\",\r\n    exportAs: \"suiAccordionPanel\",\r\n    template: `\r\n<!-- Title -->\r\n<div class=\"title\" [class.active]=\"isOpen\" (click)=\"toggle()\" >\r\n    <ng-content select=\"[title]\"></ng-content>\r\n</div>\r\n<!-- Content -->\r\n<div [suiCollapse]=\"!isOpen\" [collapseDuration]=\"transitionDuration\">\r\n    <div class=\"content\" [class.active]=\"isOpen\" [suiTransition]=\"transitionController\">\r\n        <ng-content select=\"[content]\"></ng-content>\r\n    </div>\r\n</div>\r\n`,\r\n    styles: [`\r\n/* Manual style as Semantic UI relies on > selector */\r\n.content {\r\n    padding: .5em 0 1em;\r\n}\r\n\r\n/* Another > selector fix */\r\n:host:first-child .title {\r\n    border-top: none;\r\n}\r\n`]\r\n})\r\nexport class SuiAccordionPanel {\r\n    private _service:SuiAccordionService;\r\n\r\n    public transitionController:TransitionController;\r\n\r\n    public set service(service:SuiAccordionService) {\r\n        this._service = service;\r\n        this._changeDetector.detectChanges();\r\n    }\r\n\r\n    @Input()\r\n    public isDisabled:boolean;\r\n\r\n    private _isOpen:boolean;\r\n\r\n    @Input()\r\n    public get isOpen():boolean {\r\n        return this._isOpen;\r\n    }\r\n\r\n    public set isOpen(value:boolean) {\r\n        // Convert to boolean (fixes false != undefined)\r\n        const isOpen = !!value;\r\n\r\n        if (isOpen !== this.isOpen) {\r\n            // Only update if the value has changed.\r\n            this._isOpen = isOpen;\r\n\r\n            if (isOpen && this._service) {\r\n                // If we are opening this panel, we must close the other ones.\r\n                this._service.closeOtherPanels(this);\r\n            }\r\n            this.isOpenChange.emit(this.isOpen);\r\n\r\n            // Cancel all current animations, and fade the contents. The direction is automatic.\r\n            this.transitionController.stopAll();\r\n            this.transitionController.animate(new Transition(this.transition, this.transitionDuration));\r\n        }\r\n    }\r\n\r\n    public get transition():string {\r\n        if (this._service) {\r\n            return this._service.transition;\r\n        }\r\n\r\n        return \"fade\";\r\n    }\r\n\r\n    public get transitionDuration():number {\r\n        if (this._service) {\r\n            // Return the service defined transition duration.\r\n            return this._service.transitionDuration;\r\n        }\r\n        // Revert to instantaneous if the service is not yet loaded.\r\n        return 0;\r\n    }\r\n\r\n    @Output()\r\n    public isOpenChange:EventEmitter<boolean>;\r\n\r\n    constructor(private _changeDetector:ChangeDetectorRef) {\r\n        this.transitionController = new TransitionController(false);\r\n\r\n        this._isOpen = false;\r\n        this.isOpenChange = new EventEmitter<boolean>(false);\r\n    }\r\n\r\n    public toggle():void {\r\n        if (!this.isDisabled) {\r\n            this.isOpen = !this.isOpen;\r\n        }\r\n    }\r\n}\r\n"]}