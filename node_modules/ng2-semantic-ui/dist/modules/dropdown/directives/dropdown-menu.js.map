{"version":3,"file":"dropdown-menu.js","sourceRoot":"","sources":["../../../../src/modules/dropdown/directives/dropdown-menu.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n    Directive, ContentChild, forwardRef, Renderer2, ElementRef, AfterContentInit,\r\n    ContentChildren, QueryList, Input, HostListener, ChangeDetectorRef, OnDestroy\r\n} from \"@angular/core\";\r\nimport { Transition, SuiTransition, TransitionController, TransitionDirection } from \"../../transition/index\";\r\nimport { HandledEvent, IAugmentedElement, KeyCode } from \"../../../misc/util/index\";\r\nimport { DropdownService, DropdownAutoCloseType } from \"../services/dropdown.service\";\r\n// Polyfill for IE\r\nimport \"element-closest\";\r\n\r\n@Directive({\r\n    // We must attach to every '.item' as Angular doesn't support > selectors.\r\n    selector: \".item\"\r\n})\r\nexport class SuiDropdownMenuItem {\r\n    public get isDisabled():boolean {\r\n        // We must use nativeElement as Angular doesn't have a way of reading class information.\r\n        const element = this.element.nativeElement as Element;\r\n        return element.classList.contains(\"disabled\");\r\n    }\r\n\r\n    private _isSelected:boolean;\r\n\r\n    public get isSelected():boolean {\r\n        return this._isSelected;\r\n    }\r\n\r\n    public set isSelected(value:boolean) {\r\n        // Renderer is used to enable a dynamic class name.\r\n        if (value) {\r\n            this._renderer.addClass(this.element.nativeElement, this.selectedClass);\r\n        } else {\r\n            this._renderer.removeClass(this.element.nativeElement, this.selectedClass);\r\n        }\r\n    }\r\n\r\n    // Stores the class name used for a 'selected' item.\r\n    public selectedClass:string;\r\n\r\n    @ContentChild(forwardRef(() => SuiDropdownMenu))\r\n    public childDropdownMenu:SuiDropdownMenu;\r\n\r\n    public get hasChildDropdown():boolean {\r\n        return !!this.childDropdownMenu;\r\n    }\r\n\r\n    constructor(private _renderer:Renderer2, public element:ElementRef) {\r\n        this.isSelected = false;\r\n\r\n        this.selectedClass = \"selected\";\r\n    }\r\n\r\n    public performClick():void {\r\n        // Using directly because Renderer2 doesn't have invokeElementMethod method anymore.\r\n        this.element.nativeElement.click();\r\n    }\r\n}\r\n\r\n@Directive({\r\n    selector: \"[suiDropdownMenu]\"\r\n})\r\nexport class SuiDropdownMenu extends SuiTransition implements AfterContentInit, OnDestroy {\r\n    private _service:DropdownService;\r\n    private _transitionController:TransitionController;\r\n\r\n    @Input()\r\n    public menuTransition:string;\r\n\r\n    @Input()\r\n    public menuTransitionDuration:number;\r\n\r\n    public get service():DropdownService {\r\n        return this._service;\r\n    }\r\n\r\n    public set service(value:DropdownService) {\r\n        this._service = value;\r\n\r\n        let previousIsOpen = this._service.isOpen;\r\n        this._service.isOpenChange.subscribe((isOpen:boolean) => {\r\n            if (isOpen !== previousIsOpen) {\r\n                // Only run transitions if the open state has changed.\r\n                this._transitionController.stopAll();\r\n                this._transitionController.animate(\r\n                    new Transition(\r\n                        this.menuTransition,\r\n                        this.menuTransitionDuration,\r\n                        TransitionDirection.Either,\r\n                        () => this._service.isAnimating = false));\r\n            }\r\n\r\n            if (!isOpen) {\r\n                // Reset the item selections when a nested item is selected to avoid incosistent open states.\r\n                if (this.selectedItems.length > 1) {\r\n                    this.resetSelection();\r\n                }\r\n            }\r\n\r\n            previousIsOpen = isOpen;\r\n        });\r\n    }\r\n\r\n    @ContentChildren(SuiDropdownMenuItem)\r\n    private _itemsQueryInternal:QueryList<SuiDropdownMenuItem>;\r\n\r\n    private _itemsQueryOverride:QueryList<SuiDropdownMenuItem>;\r\n\r\n    public set items(items:QueryList<SuiDropdownMenuItem>) {\r\n        this._itemsQueryOverride = items;\r\n    }\r\n\r\n    private get _itemsQuery():QueryList<SuiDropdownMenuItem> {\r\n        return this._itemsQueryOverride || this._itemsQueryInternal;\r\n    }\r\n\r\n    // Get the list of items, ignoring those that are disabled.\r\n    private get _items():SuiDropdownMenuItem[] {\r\n        return this._itemsQuery.filter(i => !i.isDisabled);\r\n    }\r\n\r\n    // Stack that keeps track of the currently selected item.\r\n    // Selected items lower in the stack are necessarily the parent of the item one higher.\r\n    public selectedItems:SuiDropdownMenuItem[];\r\n\r\n    // Sets whether or not to automatically select the 1st item when the dropdown is opened.\r\n    @Input()\r\n    public menuAutoSelectFirst:boolean;\r\n\r\n    @Input()\r\n    public menuSelectedItemClass:string;\r\n\r\n    private _documentKeyDownListener:() => void;\r\n\r\n    constructor(renderer:Renderer2, public element:ElementRef, changeDetector:ChangeDetectorRef) {\r\n        super(renderer, element, changeDetector);\r\n\r\n        // Initialise transition functionality.\r\n        this._transitionController = new TransitionController(false);\r\n        this.setTransitionController(this._transitionController);\r\n\r\n        this.menuTransition = \"slide down\";\r\n        this.menuTransitionDuration = 200;\r\n\r\n        this.menuAutoSelectFirst = false;\r\n        this.menuSelectedItemClass = \"selected\";\r\n\r\n        this._documentKeyDownListener = renderer.listen(\"document\", \"keydown\", (e:KeyboardEvent) => this.onDocumentKeyDown(e));\r\n    }\r\n\r\n    @HostListener(\"click\", [\"$event\"])\r\n    public onClick(e:HandledEvent & MouseEvent):void {\r\n        if (!e.eventHandled) {\r\n            e.eventHandled = true;\r\n\r\n            if (this._service.autoCloseMode === DropdownAutoCloseType.ItemClick) {\r\n                const target = e.target as IAugmentedElement;\r\n                if (this.element.nativeElement.contains(target.closest(\".item\")) && !/input|textarea/i.test(target.tagName)) {\r\n                    // Once an item is selected, we can close the entire dropdown.\r\n                    this._service.setOpenState(false, true);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public onDocumentKeyDown(e:KeyboardEvent):void {\r\n        // Only the root dropdown (i.e. not nested dropdowns) is responsible for keeping track of the currently selected item.\r\n        if (this._service.isOpen && !this._service.isNested) {\r\n            // Stop document events like scrolling while open.\r\n            const target = e.target as Element;\r\n            if (!/input/i.test(target.tagName) &&\r\n                [KeyCode.Escape, KeyCode.Enter, KeyCode.Up, KeyCode.Down, KeyCode.Left, KeyCode.Right].find(kC => kC === e.keyCode)) {\r\n                e.preventDefault();\r\n            }\r\n\r\n            // Gets the top selected item from the stack.\r\n            const [selected] = this.selectedItems.slice(-1);\r\n            // Keeping track of the menu containing the currently selected element allows us to easily determine its siblings.\r\n            let selectedContainer:SuiDropdownMenu = this;\r\n            if (this.selectedItems.length >= 2) {\r\n                const [selectedParent] = this.selectedItems.slice(-2);\r\n                selectedContainer = selectedParent.childDropdownMenu;\r\n            }\r\n\r\n            switch (e.keyCode) {\r\n                // Escape : close the entire dropdown.\r\n                case KeyCode.Escape: {\r\n                    this._service.setOpenState(false);\r\n                    break;\r\n                }\r\n                // Down : select the next item below the current one, or the 1st if none selected.\r\n                case KeyCode.Down:\r\n                // Up : select the next item above the current one, or the 1st if none selected.\r\n                case KeyCode.Up: {\r\n                    this.selectedItems.pop();\r\n                    this.selectedItems.push(selectedContainer.updateSelection(selected, e.keyCode));\r\n                    // Prevent default regardless of whether we are in an input, to stop jumping to the start or end of the query string.\r\n                    e.preventDefault();\r\n                    break;\r\n                }\r\n                // Enter : if the item doesn't contain a nested dropdown, 'click' it. Otherwise, fall through to 'Right' action.\r\n                case KeyCode.Enter: {\r\n                    if (selected && !selected.hasChildDropdown) {\r\n                        selected.performClick();\r\n                        break;\r\n                    }\r\n                }\r\n                    // falls through\r\n                // Right : if the selected item contains a nested dropdown, open the dropdown & select the 1st item.\r\n                case KeyCode.Right: {\r\n                    if (selected && selected.hasChildDropdown) {\r\n                        selected.childDropdownMenu.service.setOpenState(true);\r\n\r\n                        this.selectedItems.push(selected.childDropdownMenu.updateSelection(selected, e.keyCode));\r\n                    }\r\n                    break;\r\n                }\r\n                // Left : if the selected item is in a nested dropdown, close it and select the containing item.\r\n                case KeyCode.Left: {\r\n                    if (this.selectedItems.length >= 2) {\r\n                        this.selectedItems.pop();\r\n                        const [selectedParent] = this.selectedItems.slice(-1);\r\n\r\n                        selectedParent.childDropdownMenu.service.setOpenState(false);\r\n                        selectedParent.isSelected = true;\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public resetSelection():void {\r\n        this.selectedItems = [];\r\n        this._items.forEach(i => {\r\n            i.selectedClass = this.menuSelectedItemClass;\r\n            i.isSelected = false;\r\n        });\r\n\r\n        if (this.menuAutoSelectFirst && this._items.length > 0) {\r\n            // Autoselect 1st item if required & possible.\r\n            this._items[0].isSelected = true;\r\n            this.scrollToItem(this._items[0]);\r\n            this.selectedItems.push(this._itemsQuery.first);\r\n        }\r\n    }\r\n\r\n    // Determines the item to next be selected, based on the keyboard input & the currently selected item.\r\n    public updateSelection(selectedItem:SuiDropdownMenuItem, keyCode:KeyCode):SuiDropdownMenuItem {\r\n        if (selectedItem) {\r\n            // Remove the selected status on the previously selected item.\r\n            selectedItem.isSelected = false;\r\n        }\r\n\r\n        let selectedIndex = this._items\r\n            .findIndex(i => i === selectedItem);\r\n\r\n        let newSelection:SuiDropdownMenuItem;\r\n\r\n        switch (keyCode) {\r\n            case KeyCode.Enter:\r\n            case KeyCode.Right:\r\n            case KeyCode.Down:\r\n                selectedIndex += 1;\r\n                break;\r\n            case KeyCode.Up:\r\n                if (selectedIndex === -1) {\r\n                    // If none are selected, select the 1st item. Should this be `this.items.last - 1`?\r\n                    selectedIndex = 0;\r\n                    break;\r\n                }\r\n\r\n                selectedIndex -= 1;\r\n                break;\r\n        }\r\n\r\n        // Select the item at the updated index. The || is to stop us selecting past the start or end of the item list.\r\n        newSelection = this._items[selectedIndex] || selectedItem;\r\n\r\n        if (newSelection) {\r\n            // Set the selected status on the newly selected item.\r\n            newSelection.isSelected = true;\r\n\r\n            // Set the current scroll position to the location of the newly selected item.\r\n            this.scrollToItem(newSelection);\r\n        }\r\n\r\n        return newSelection;\r\n    }\r\n\r\n    public scrollToItem(item:SuiDropdownMenuItem):void {\r\n        const menu:Element = this.element.nativeElement;\r\n        const selectedRect:ClientRect = item.element.nativeElement.getBoundingClientRect();\r\n\r\n        const menuRect = menu.getBoundingClientRect();\r\n\r\n        let scrollAmount = 0;\r\n\r\n        if (selectedRect.bottom > menuRect.bottom) {\r\n            scrollAmount = selectedRect.bottom - menuRect.bottom;\r\n        }\r\n\r\n        if (selectedRect.top < menuRect.top) {\r\n            scrollAmount = selectedRect.top - menuRect.top;\r\n        }\r\n\r\n        menu.scrollTop += Math.round(scrollAmount);\r\n    }\r\n\r\n    public ngAfterContentInit():void {\r\n        this.onItemsChanged();\r\n        this._itemsQuery.changes.subscribe(() => this.onItemsChanged());\r\n    }\r\n\r\n    private onItemsChanged():void {\r\n        // We use `_items` rather than `items` in case one or more have become disabled.\r\n        this.resetSelection();\r\n    }\r\n\r\n    public ngOnDestroy():void {\r\n        this._documentKeyDownListener();\r\n    }\r\n}\r\n"]}