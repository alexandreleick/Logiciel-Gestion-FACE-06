{"version":3,"file":"dropdown.js","sourceRoot":"","sources":["../../../../src/modules/dropdown/directives/dropdown.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n    Directive, Input, HostBinding, EventEmitter, Output, AfterContentInit, ContentChild,\r\n    ElementRef, HostListener, QueryList, ContentChildren\r\n} from \"@angular/core\";\r\nimport { HandledEvent, KeyCode, IFocusEvent } from \"../../../misc/util/index\";\r\nimport { DropdownService, DropdownAutoCloseType } from \"../services/dropdown.service\";\r\nimport { SuiDropdownMenu } from \"./dropdown-menu\";\r\n\r\n@Directive({\r\n    selector: \"[suiDropdown]\"\r\n})\r\nexport class SuiDropdown implements AfterContentInit {\r\n    public service:DropdownService;\r\n\r\n    @ContentChild(SuiDropdownMenu)\r\n    private _menu:SuiDropdownMenu;\r\n\r\n    @ContentChildren(SuiDropdown, { descendants: true })\r\n    private _children:QueryList<SuiDropdown>;\r\n\r\n    public get children():SuiDropdown[] {\r\n        // @ContentChildren includes the current element by default.\r\n        return this._children.filter(c => c !== this);\r\n    }\r\n\r\n    @Output()\r\n    public get isOpenChange():EventEmitter<boolean> {\r\n        return this.service.isOpenChange;\r\n    }\r\n\r\n    @HostBinding(\"class.active\")\r\n    public get isActive():boolean {\r\n        // This is to ensure nested dropdowns don't get made bold.\r\n        return this.service.isOpen && !this.service.isNested;\r\n    }\r\n\r\n    @Input()\r\n    public get isOpen():boolean {\r\n        return this.service.isOpen;\r\n    }\r\n\r\n    public set isOpen(value:boolean) {\r\n        // If we are opening the dropdown, we want to always open its parents.\r\n        this.service.setOpenState(value, !!value);\r\n    }\r\n\r\n    @HostBinding(\"class.disabled\")\r\n    @Input()\r\n    public get isDisabled():boolean {\r\n        return this.service.isDisabled;\r\n    }\r\n\r\n    public set isDisabled(value:boolean) {\r\n        this.service.setDisabledState(value);\r\n    }\r\n\r\n    @Input(\"tabindex\")\r\n    private _tabIndex?:number;\r\n\r\n    @HostBinding(\"attr.tabindex\")\r\n    public get tabIndex():number | undefined {\r\n        if (this.isDisabled || this.service.isNested) {\r\n            // If disabled, remove from tabindex.\r\n            return undefined;\r\n        }\r\n        if (this._tabIndex != undefined) {\r\n            // If custom tabindex, default to that.\r\n            return this._tabIndex;\r\n        }\r\n        // Otherwise, return default of 0.\r\n        return 0;\r\n    }\r\n\r\n    @Input()\r\n    public get autoClose():DropdownAutoCloseType {\r\n        return this.service.autoCloseMode;\r\n    }\r\n\r\n    public set autoClose(value:DropdownAutoCloseType) {\r\n        this.service.autoCloseMode = value;\r\n    }\r\n\r\n    constructor(private _element:ElementRef) {\r\n        this.service = new DropdownService();\r\n        this.service.isOpenChange.subscribe(() => {\r\n            if (this.service.isOpen) {\r\n                this._element.nativeElement.focus();\r\n            }\r\n        });\r\n    }\r\n\r\n    public ngAfterContentInit():void {\r\n        if (!this._menu) {\r\n            throw new Error(\"You must set [suiDropdownMenu] on the menu element.\");\r\n        }\r\n        this._menu.service = this.service;\r\n\r\n        this.childrenUpdated();\r\n        this._children.changes\r\n            .subscribe(() => this.childrenUpdated());\r\n    }\r\n\r\n    private childrenUpdated():void {\r\n        // Reregister child dropdowns each time the menu content changes.\r\n        this.children\r\n            .map(c => c.service)\r\n            .forEach(s => this.service.registerChild(s));\r\n    }\r\n\r\n    @HostListener(\"click\", [\"$event\"])\r\n    public onClick(e:HandledEvent):void {\r\n        if (!e.eventHandled) {\r\n            e.eventHandled = true;\r\n\r\n            this.service.toggleOpenState();\r\n        }\r\n    }\r\n\r\n    @HostListener(\"focusout\", [\"$event\"])\r\n    private onFocusOut(e:IFocusEvent):void {\r\n        if (!this._element.nativeElement.contains(e.relatedTarget)) {\r\n            this.externallyClose();\r\n        }\r\n    }\r\n\r\n    @HostListener(\"keypress\", [\"$event\"])\r\n    public onKeypress(e:HandledEvent & KeyboardEvent):void {\r\n        // Block the keyboard event from being fired on parent dropdowns.\r\n        if (!e.eventHandled) {\r\n\r\n            if (e.keyCode === KeyCode.Enter) {\r\n                e.eventHandled = true;\r\n\r\n                this.service.setOpenState(true);\r\n            }\r\n        }\r\n    }\r\n\r\n    private externallyClose():void {\r\n        if (this.service.autoCloseMode === DropdownAutoCloseType.ItemClick ||\r\n                this.service.autoCloseMode === DropdownAutoCloseType.OutsideClick) {\r\n                // No need to reflect in parent since they are also bound to document.\r\n            this.service.setOpenState(false);\r\n        }\r\n    }\r\n}\r\n"]}